name: CI

on:
  push:
    branches: ["main"]
    tags: ["v*"]
  pull_request:
    branches: ["main"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  RUST_BACKTRACE: 1

jobs:

  ##########################
  # Linting and formatting #
  ##########################

  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
          components: clippy

      - run: cargo clippy --all-features -- -D warnings

  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: nightly
          components: rustfmt

      - run: cargo fmt -- --check




  ###########
  # Testing #
  ###########

  feature:
    strategy:
      fail-fast: false
      matrix:
        feature:
          - <none>
          - parser
          - serde
          - juniper
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: nightly
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable

      - run: cargo +nightly update -Z minimal-versions

      - run: cargo check --no-default-features
                   ${{ (matrix.feature != '<none>'
                        && format('--features {0}', matrix.feature))
                    ||     '' }}
        env:
          RUSTFLAGS: -D warnings

  msrv:
    name: MSRV
    strategy:
      fail-fast: false
      matrix:
        msrv: ["1.65.0"]
        os:
          - ubuntu
          - macOS
          - windows
    runs-on: ${{ matrix.os }}-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: nightly
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.msrv }}

      - run: cargo +nightly update -Z minimal-versions

      - run: cargo check --all-features

  test:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu
          - macOS
          - windows
        toolchain:
          - stable
          - beta
          - nightly
    runs-on: ${{ matrix.os }}-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          components: rust-src

      - run: cargo install cargo-careful
        if: ${{ matrix.toolchain == 'nightly' }}

      - run: cargo ${{ (matrix.toolchain == 'nightly' && 'careful') || '' }}
                   test --all-features




  #############
  # Releasing #
  #############

  publish:
    name: publish (crates.io)
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    needs: ["release-github"]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable

      - run: cargo publish -p gherkin
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATESIO_TOKEN }}

  release-github:
    name: release (GitHub)
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    needs:
      - clippy
      - feature
      - msrv
      - rustfmt
      - test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Parse release version
        id: release
        run: echo "version=${GITHUB_REF#refs/tags/v}"
             >> $GITHUB_OUTPUT
      - name: Verify release version matches `gherkin` Cargo manifest
        run: |
          test "${{ steps.release.outputs.version }}" \
            == "$(grep -m1 'version = "' Cargo.toml | cut -d'"' -f2)"

      - name: Parse CHANGELOG link
        id: changelog
        run: echo "link=${{ github.server_url }}/${{ github.repository }}/blob/v${{ steps.release.outputs.version }}/CHANGELOG.md#$(sed -n '/^## \[${{ steps.release.outputs.version }}\]/{s/^## \[\(.*\)\][^0-9]*\([0-9].*\)/\1--\2/;s/[^0-9a-z-]*//g;p;}' CHANGELOG.md)"
             >> $GITHUB_OUTPUT

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.release.outputs.version }}
          body: |
            [API docs](https://docs.rs/gherkin/${{ steps.release.outputs.version }})
            [Changelog](${{ steps.changelog.outputs.link }})
          prerelease: ${{ contains(steps.release.outputs.version, '-') }}
